colnames(time.prop.group1) <- c("Behaviour1","time.prop1","ID.fem")
time.prop.group2$ID.fem <- substr(time.prop.group2$ID,4,7)
time.prop.group2 <- time.prop.group2[,-3]
colnames(time.prop.group2) <- c("Behaviour2","time.prop2","ID.fem")
## Sort by behaviors
LS1 <- filter(time.prop.group1, Behaviour1 == "Leg Showcase")
LS2 <- filter(time.prop.group2, Behaviour2 == "Leg Showcase")
LS.PS1 <- filter(time.prop.group1, Behaviour1 == "Leg Showcase + Pedipalp Showcase")
LS.PS2 <- filter(time.prop.group2, Behaviour2 == "Leg Showcase + Pedipalp Showcase")
Fr1 <- filter(time.prop.group1, Behaviour1 == "Freezing")
Fr2 <- filter(time.prop.group2, Behaviour2 == "Freezing")
LS.M1 <- filter(time.prop.group1, Behaviour1 == "Leg Showcase + Mounted")
LS.M2 <- filter(time.prop.group2, Behaviour2 == "Leg Showcase + Mounted")
M.F1 <- filter(time.prop.group1, Behaviour1 == "Mounted + Freezing")
M.F2 <- filter(time.prop.group2, Behaviour2 == "Mounted + Freezing")
LS.M.PS1 <- filter(time.prop.group1, Behaviour1 == "Leg Showcase + Mounted + Pedipalp Showcase")
LS.M.PS2 <- filter(time.prop.group2, Behaviour2 == "Leg Showcase + Mounted + Pedipalp Showcase")
M.PS1 <- filter(time.prop.group1, Behaviour1 == "Mounted + Pedipalp Showcase")
M.PS2 <- filter(time.prop.group2, Behaviour2 == "Mounted + Pedipalp Showcase")
PS1 <- filter(time.prop.group1, Behaviour1 == "Pedipalp Showcase")
PS2 <- filter(time.prop.group2, Behaviour2 == "Pedipalp Showcase")
R1 <- filter(time.prop.group1, Behaviour1 == "Retreat")
R2 <- filter(time.prop.group2, Behaviour2 == "Retreat")
G1 <- filter(time.prop.group1, Behaviour1 == "Grooming")
G2 <- filter(time.prop.group2, Behaviour2 == "Grooming")
G.LS1 <- filter(time.prop.group1, Behaviour1 == "Grooming + Leg Showcase")
G.LS2 <- filter(time.prop.group2, Behaviour2 == "Grooming + Leg Showcase")
## Merge df
LS <- left_join(LS1[,-1],LS2[,-1])
LS.PS <- left_join(LS.PS1[,-1],LS.PS2[,-1])
Fr <- left_join(Fr1[,-1],Fr2[,-1])
LS.M <- left_join(LS.M1[,-1],LS.M2[,-1])
M.F <- left_join(M.F1[,-1],M.F2[,-1])
LS.M.PS <- left_join(LS.M.PS1[,-1],LS.M.PS2[,-1])
M.PS <- left_join(M.PS1[,-1],M.PS2[,-1])
PS <- left_join(PS1[,-1],PS2[,-1])
R <- left_join(R1[,-1],R2[,-1])
G <- left_join(G1[,-1],G2[,-1])
G.LS <- left_join(G.LS1[,-1],G.LS2[,-1])
View(G)
View(G1)
View(G2)
?left_join
G <- left_join(G1[,-1],G2[,-1],keep=TRUE)
View(G1)
colnames(empty.df1) <- c("Behaviour1","time.prop1","ID.fem")
## Sort by behaviors
LS1 <- filter(time.prop.group1, Behaviour1 == "Leg Showcase")
LS2 <- filter(time.prop.group2, Behaviour2 == "Leg Showcase")
LS.PS1 <- filter(time.prop.group1, Behaviour1 == "Leg Showcase + Pedipalp Showcase")
LS.PS2 <- filter(time.prop.group2, Behaviour2 == "Leg Showcase + Pedipalp Showcase")
Fr1 <- filter(time.prop.group1, Behaviour1 == "Freezing")
Fr2 <- filter(time.prop.group2, Behaviour2 == "Freezing")
LS.M1 <- filter(time.prop.group1, Behaviour1 == "Leg Showcase + Mounted")
LS.M2 <- filter(time.prop.group2, Behaviour2 == "Leg Showcase + Mounted")
M.F1 <- filter(time.prop.group1, Behaviour1 == "Mounted + Freezing")
M.F2 <- filter(time.prop.group2, Behaviour2 == "Mounted + Freezing")
LS.M.PS1 <- filter(time.prop.group1, Behaviour1 == "Leg Showcase + Mounted + Pedipalp Showcase")
LS.M.PS2 <- filter(time.prop.group2, Behaviour2 == "Leg Showcase + Mounted + Pedipalp Showcase")
M.PS1 <- filter(time.prop.group1, Behaviour1 == "Mounted + Pedipalp Showcase")
M.PS2 <- filter(time.prop.group2, Behaviour2 == "Mounted + Pedipalp Showcase")
PS1 <- filter(time.prop.group1, Behaviour1 == "Pedipalp Showcase")
PS2 <- filter(time.prop.group2, Behaviour2 == "Pedipalp Showcase")
R1 <- filter(time.prop.group1, Behaviour1 == "Retreat")
R2 <- filter(time.prop.group2, Behaviour2 == "Retreat")
G1 <- filter(time.prop.group1, Behaviour1 == "Grooming")
G2 <- filter(time.prop.group2, Behaviour2 == "Grooming")
G.LS1 <- filter(time.prop.group1, Behaviour1 == "Grooming + Leg Showcase")
G.LS2 <- filter(time.prop.group2, Behaviour2 == "Grooming + Leg Showcase")
# Create the empty DF:
empty.df1 <- as.data.frame(matrix(NA,nrow=15,ncol=3))
colnames(empty.df1) <- colnames(LS1)
empty.df1$ID.fem <- LS1$ID.fem
View(empty.df1)
# Merge
LS1 <- natural_join(LS1,empty.df1,by="ID.fem",jointype="FULL")
LS.PS1 <- natural_join(LS.PS1,empty.df1,by="ID.fem",jointype="FULL")
Fr1 <- natural_join(Fr1,empty.df1,by="ID.fem",jointype="FULL")
LS.M1 <- natural_join(LS.M1,empty.df1,by="ID.fem",jointype="FULL")
M.F1 <- natural_join(M.F1,empty.df1,by="ID.fem",jointype="FULL")
LS.M.PS1 <- natural_join(LS.M.PS1,empty.df1,by="ID.fem",jointype="FULL")
M.PS1 <- natural_join(LS1,empty.df1,by="ID.fem",jointype="FULL")
PS1 <- natural_join(PS1,empty.df1,by="ID.fem",jointype="FULL")
R1 <- natural_join(R1,empty.df1,by="ID.fem",jointype="FULL")
G1 <- natural_join(G1,empty.df1,by="ID.fem",jointype="FULL")
G.LS1 <- natural_join(G.LS1,empty.df1,by="ID.fem",jointype="FULL")
# Merge2
LS2 <- natural_join(LS2,empty.df2,by="ID.fem",jointype="FULL")
LS.PS2 <- natural_join(LS.PS2,empty.df2,by="ID.fem",jointype="FULL")
Fr2 <- natural_join(Fr2,empty.df2,by="ID.fem",jointype="FULL")
LS.M2 <- natural_join(LS.M2,empty.df2,by="ID.fem",jointype="FULL")
M.F2 <- natural_join(M.F2,empty.df2,by="ID.fem",jointype="FULL")
LS.M.PS2 <- natural_join(LS.M.PS2,empty.df2,by="ID.fem",jointype="FULL")
M.PS2 <- natural_join(LS2,empty.df2,by="ID.fem",jointype="FULL")
PS2 <- natural_join(PS2,empty.df2,by="ID.fem",jointype="FULL")
R2 <- natural_join(R2,empty.df2,by="ID.fem",jointype="FULL")
G2 <- natural_join(G2,empty.df2,by="ID.fem",jointype="FULL")
G.LS2 <- natural_join(G.LS2,empty.df2,by="ID.fem",jointype="FULL")
empty.df2 <- as.data.frame(matrix(NA,nrow=15,ncol=3))
colnames(empty.df2) <- colnames(LS2)
empty.df2$ID.fem <- LS1$ID.fem
# Merge2
LS2 <- natural_join(LS2,empty.df2,by="ID.fem",jointype="FULL")
LS.PS2 <- natural_join(LS.PS2,empty.df2,by="ID.fem",jointype="FULL")
Fr2 <- natural_join(Fr2,empty.df2,by="ID.fem",jointype="FULL")
LS.M2 <- natural_join(LS.M2,empty.df2,by="ID.fem",jointype="FULL")
M.F2 <- natural_join(M.F2,empty.df2,by="ID.fem",jointype="FULL")
LS.M.PS2 <- natural_join(LS.M.PS2,empty.df2,by="ID.fem",jointype="FULL")
M.PS2 <- natural_join(LS2,empty.df2,by="ID.fem",jointype="FULL")
PS2 <- natural_join(PS2,empty.df2,by="ID.fem",jointype="FULL")
R2 <- natural_join(R2,empty.df2,by="ID.fem",jointype="FULL")
G2 <- natural_join(G2,empty.df2,by="ID.fem",jointype="FULL")
G.LS2 <- natural_join(G.LS2,empty.df2,by="ID.fem",jointype="FULL")
G <- left_join(G1[,-1],G2[,-1],keep=TRUE)
## Merge df
LS <- left_join(LS1[,-1],LS2[,-1])
## Merge df
LS <- left_join(LS1[,-1],LS2[,-1],by="ID.fem")
## Merge df
LS <- left_join(LS2[,-2],LS2[,-2])
LS.PS <- left_join(LS.PS2[,-2],LS.PS2[,-2])
Fr <- left_join(Fr2[,-2],Fr2[,-2])
LS.M <- left_join(LS.M2[,-2],LS.M2[,-2])
M.F <- left_join(M.F2[,-2],M.F2[,-2])
LS.M.PS <- left_join(LS.M.PS2[,-2],LS.M.PS2[,-2])
M.PS <- left_join(M.PS2[,-2],M.PS2[,-2])
PS <- left_join(PS2[,-2],PS2[,-2])
R <- left_join(R2[,-2],R2[,-2])
G <- left_join(G2[,-2],G2[,-2],keep=TRUE)
G.LS <- left_join(G.LS2[,-2],G.LS2[,-2])
View(G1)
## Merge df
LS <- left_join(LS1[,-2],LS2[,-2])
LS.PS <- left_join(LS.PS1[,-2],LS.PS2[,-2])
Fr <- left_join(Fr1[,-2],Fr2[,-2])
LS.M <- left_join(LS.M1[,-2],LS.M2[,-2])
M.F <- left_join(M.F1[,-2],M.F2[,-2])
LS.M.PS <- left_join(LS.M.PS1[,-2],LS.M.PS2[,-2])
M.PS <- left_join(M.PS1[,-2],M.PS2[,-2])
PS <- left_join(PS1[,-2],PS2[,-2])
R <- left_join(R1[,-2],R2[,-2])
G <- left_join(G1[,-2],G2[,-2],keep=TRUE)
G.LS <- left_join(G.LS1[,-2],G.LS2[,-2])
# Remove NAs
LS <- replace(LS,is.na(LS),0)
LS.PS <- replace(LS.PS,is.na(LS.PS),0)
Fr <- replace(Fr,is.na(Fr),0)
LS.M <- replace(LS.M,is.na(LS.M),0)
M.F <- replace(M.F,is.na(M.F),0)
LS.M.PS <- replace(LS.M.PS,is.na(LS.M.PS),0)
M.PS <- replace(M.PS,is.na(M.PS),0)
PS <- replace(PS,is.na(PS),0)
R <- replace(R,is.na(R),0)
G <- replace(G,is.na(G),0)
G.LS <- replace(G.LS,is.na(G.LS),0)
# Put NAs again for the 5 non described behaviours of group 2
LS$time.prop2[c(1,4,12,14,15)] <- NA
LS.PS$time.prop2[c(1,4,12,14,15)] <- NA
Fr$time.prop2[c(1,4,12,14,15)] <- NA
LS.M$time.prop2[c(1,4,12,14,15)] <- NA
M.F$time.prop2[c(1,4,12,14,15)] <- NA
LS.M.PS$time.prop2[c(1,4,12,14,15)] <- NA
M.PS$time.prop2[c(1,4,12,14,15)] <- NA
PS$time.prop2[c(1,4,12,14,15)] <- NA
R$time.prop2[c(1,4,12,14,15)] <- NA
G$time.prop2[c(1,4,12,14,15)] <- NA
G.LS$time.prop2[c(1,4,12,14,15)] <- NA
# Function for the jackknife:
jackknife <- function(dataset) {
# Calculate variance of variable X
varX <- 0
for (i in 1:nrow(dataset)) {
varX <- varX + (dataset[i, 3] - mean(dataset[, 3])) ^ 2
}
# Calculate variance of variable Y
varY <- 0
for (i in 1:nrow(dataset)) {
varY <- varY + (dataset[i, 2] - mean(dataset[, 2])) ^ 2
}
# Calculate y, ratio of variances
y <- varY / varX
# Calculate all y-i
dataset$yi <- NA
for (i in 1:nrow(dataset)) {
varXi <- 0
varYi <- 0
dataseti <- dataset[-i, ]
for (j in 1:(nrow(dataset) - 1)) {
varXi <- varXi + (dataseti[j, 3] - mean(dataseti[, 3])) ^ 2
varYi <- varYi + (dataseti[j, 2] - mean(dataseti[, 2])) ^ 2
}
dataset[i, 4] <- varYi / varXi
}
# Logarithmic transformation of all y-i
dataset$Li <- nrow(dataset) * log(y) - (nrow(dataset) - 1) * log(dataset$yi)
# Calculate mean of the distribution (mean of all y-i)
meanL <- mean(dataset$Li)
# Calculate variance of distribution (variance of all y-1)
vLi <- 0
for (i in 1:nrow(dataset)) {
vLi <- vLi + (dataset[i, 5] - mean(dataset[, 5])) ^ 2
}
VarLi <- vLi / (nrow(dataset) * (nrow(dataset) - 1))
# Calculate Q the statistical value
Q <- meanL / sqrt(VarLi)
return(Q)
}
## Mean comparisons
# Wilcoxon paired test:
wilcox.test(LS$time.prop1,LS$time.prop2,paired=TRUE)
wilcox.test(LS.PS$time.prop1,LS.PS$time.prop2,paired=TRUE)
wilcox.test(Fr$time.prop1,Fr$time.prop2,paired=TRUE)
wilcox.test(LS.M$time.prop1,LS.M$time.prop2,paired=TRUE)
wilcox.test(M.F$time.prop1,M.F$time.prop2,paired=TRUE)
wilcox.test(LS.M.PS$time.prop1,LS.M.PS$time.prop2,paired=TRUE)
wilcox.test(M.PS$time.prop1,M.PS$time.prop2,paired=TRUE)
wilcox.test(PS$time.prop1,PS$time.prop2,paired=TRUE)
wilcox.test(R$time.prop1,R$time.prop2,paired=TRUE)
wilcox.test(G$time.prop1,G$time.prop2,paired=TRUE)
wilcox.test(G.LS$time.prop1,G.LS$time.prop2,paired=TRUE)
## Getting the overall time proportion :
# for group1
options(scipen = 999)
time.prop.group1
View(ag.g1.G26xJ203)
sum(time.prop.g1.G26xJ203$time.prop)
sum(time.prop.group1$time.prop)
View(time.prop.group1)
sum(time.prop.group1$time.prop1)
sum(time.prop.group2$time.prop2)
sum(mean.time.group1$mean)
sum(mean.time.group2$mean)
time.prop.group1$time.prop1 <- time.prop.group1$time.prop1 / sum(time.prop.group1$time.prop1)
sum(time.prop.group1$time.prop1)
time.prop.group1$time.prop2 <- time.prop.group1$time.prop2 / sum(time.prop.group1$time.prop2)
time.prop.group2$time.prop2 <- time.prop.group2$time.prop2 / sum(time.prop.group2$time.prop2)
sum(time.prop.group1$time.prop2)
sum(time.prop.group2$time.prop2)
mean.time.group1 <- time.prop.group1 %>%  group_by(Behaviour1) %>% summarise(sum = sum(time.prop1))
mean.time.group2 <- time.prop.group2 %>%  group_by(Behaviour2) %>% summarise(sum = sum(time.prop2))
sum(mean.time.group1$sum)
sum(mean.time.group2$sum)
mean.time.group1$sum <- mean.time.group1$sum  * 100
sum(mean.time.group1$sum)
mean.time.group2$sum <- mean.time.group2$sum  * 100
View(mean.time.group1)
sort(mean.time.group1$sum)
## Getting the overall time proportion :
# Merge aggregated behaviours
# First group
ag.time.prop.group1 <- bind_rows(
ag.g1.G26xJ203,
ag.g1.G30xJ210,
ag.g1.H30xH71,
ag.g1.H45xH65,
ag.g1.H62xJ132,
ag.g1.J101xJ204,
ag.g1.J102xJ206,
ag.g1.J110xH67,
ag.g1.J124xG42,
ag.g1.J144xG39,
ag.g1.J183xH26,
ag.g1.J189xJ112,
ag.g1.J190xJ42,
ag.g1.J191xJ68,
ag.g1.J201xG43
)
# Second group
ag.time.prop.group2 <- bind_rows(
ag.g2.G30xH52,
ag.g2.H30xG38,
ag.g2.H62xG33,
ag.g2.J101xH76,
ag.g2.J102xJ161,
ag.g2.J110xJ140,
ag.g2.J124xG32,
ag.g2.J144xG38,
ag.g2.J183xG35,
ag.g2.J190xJ212
)
options(scipen = 999)
View(ag.time.prop.group2)
ag.time.prop.group1$Duration <- ag.time.prop.group1$Duration / sum(ag.time.prop.group1$Duration)
sum(ag.time.prop.group1)
sum(ag.time.prop.group1$Duration)
ag.time.prop.group2$Duration <- ag.time.prop.group2$Duration / sum(ag.time.prop.group2$Duration)
sum(ag.time.prop.group2$Duration)
mean.time.group1 <- ag.time.prop.group1 %>%  group_by(Behaviour) %>% summarise(sum = sum(Duration))
mean.time.group2 <- ag.time.prop.group2 %>%  group_by(Behaviour) %>% summarise(sum = sum(Duration))
mean.time.group1$sum <- mean.time.group1$sum  * 100
mean.time.group2$sum <- mean.time.group2$sum  * 100
sum(mean.time.group1)
sum(mean.time.group1$sum)
View(mean.time.group1)
mean.time.group1 <- mean.time.group1[-c(1,2,12)]
mean.time.group1 <- mean.time.group1[-c(1,2,12),]
mean.time.group2 <- mean.time.group2[-c(1,2,12),]
mean.time.group1$sum <- mean.time.group1$sum / sum(mean.time.group1$sum) * 100
mean.time.group2$sum <- mean.time.group2$sum / sum(mean.time.group2$sum) * 100
sum(mean.time.group1$sum)
sum(mean.time.group1$sum)
sort(mean.time.group1$sum)
sort(mean.time.group2$sum)
View(mean.time.group2)
## Mean comparisons
# Wilcoxon paired test:
wilcox.test(LS$time.prop1,LS$time.prop2,paired=TRUE)
wilcox.test(LS.PS$time.prop1,LS.PS$time.prop2,paired=TRUE)
wilcox.test(Fr$time.prop1,Fr$time.prop2,paired=TRUE)
wilcox.test(LS.M$time.prop1,LS.M$time.prop2,paired=TRUE)
wilcox.test(M.F$time.prop1,M.F$time.prop2,paired=TRUE)
wilcox.test(LS.M.PS$time.prop1,LS.M.PS$time.prop2,paired=TRUE)
wilcox.test(M.PS$time.prop1,M.PS$time.prop2,paired=TRUE)
wilcox.test(PS$time.prop1,PS$time.prop2,paired=TRUE)
wilcox.test(M.PS$time.prop1,M.PS$time.prop2,paired=TRUE)
wilcox.test(PS$time.prop1,PS$time.prop2,paired=TRUE)
wilcox.test(R$time.prop1,R$time.prop2,paired=TRUE)
wilcox.test(G$time.prop1,G$time.prop2,paired=TRUE)
wilcox.test(G.LS$time.prop1,G.LS$time.prop2,paired=TRUE)
## Obtain Adjacency matrix for every individual:
# First group
am.g1.G26xJ203 <- get.adjacency(graph.data.frame(tr.g1.G26xJ203, directed=T), sparse = F)
am.g1.G30xJ210 <- get.adjacency(graph.data.frame(tr.g1.G30xJ210, directed=T), sparse = F)
am.g1.H30xH71 <- get.adjacency(graph.data.frame(tr.g1.H30xH71, directed=T), sparse = F)
am.g1.H45xH65 <- get.adjacency(graph.data.frame(tr.g1.H45xH65, directed=T), sparse = F)
am.g1.H62xJ132 <- get.adjacency(graph.data.frame(tr.g1.H62xJ132, directed=T), sparse = F)
am.g1.J101xJ204 <- get.adjacency(graph.data.frame(tr.g1.J101xJ204, directed=T), sparse = F)
am.g1.J102xJ206 <- get.adjacency(graph.data.frame(tr.g1.J102xJ206, directed=T), sparse = F)
am.g1.J110xH67 <- get.adjacency(graph.data.frame(tr.g1.J110xH67, directed=T), sparse = F)
am.g1.J124xG42 <- get.adjacency(graph.data.frame(tr.g1.J124xG42, directed=T), sparse = F)
am.g1.J144xG39 <- get.adjacency(graph.data.frame(tr.g1.J144xG39, directed=T), sparse = F)
am.g1.J183xH26 <- get.adjacency(graph.data.frame(tr.g1.J183xH26, directed=T), sparse = F)
am.g1.J189xJ112 <- get.adjacency(graph.data.frame(tr.g1.J189xJ112, directed=T), sparse = F)
am.g1.J190xJ42 <- get.adjacency(graph.data.frame(tr.g1.J190xJ42, directed=T), sparse = F)
am.g1.J191xJ68 <- get.adjacency(graph.data.frame(tr.g1.J191xJ68, directed=T), sparse = F)
am.g1.J201xG43 <- get.adjacency(graph.data.frame(tr.g1.J201xG43, directed=T), sparse = F)
# Second group
am.g2.G30xH52 <- get.adjacency(graph.data.frame(tr.g2.G30xH52, directed=T),sparse=F)
am.g2.H30xG38 <- get.adjacency(graph.data.frame(tr.g2.H30xG38, directed=T),sparse=F)
am.g2.H62xG33 <- get.adjacency(graph.data.frame(tr.g2.H62xG33, directed=T),sparse=F)
am.g2.J101xH76 <- get.adjacency(graph.data.frame(tr.g2.J101xH76, directed=T),sparse=F)
am.g2.J102xJ161 <- get.adjacency(graph.data.frame(tr.g2.J102xJ161, directed=T),sparse=F)
am.g2.J110xJ140 <- get.adjacency(graph.data.frame(tr.g2.J110xJ140, directed=T),sparse=F)
am.g2.J124xG32 <- get.adjacency(graph.data.frame(tr.g2.J124xG32, directed=T),sparse=F)
am.g2.J144xG38 <- get.adjacency(graph.data.frame(tr.g2.J144xG38, directed=T),sparse=F)
am.g2.J183xG35 <- get.adjacency(graph.data.frame(tr.g2.J183xG35, directed=T),sparse=F)
am.g2.J190xJ212 <- get.adjacency(graph.data.frame(tr.g2.J190xJ212, directed=T),sparse=F)
View(am.g1.J110xH67)
## Create an empty adjacency matrix :
full.adjacency <- matrix(NA, nrow = 14, ncol= 14)
colnames(full.adjacency) <- colnames(adjacency.matrix1)
rownames(full.adjacency) <- rownames(adjacency.matrix1)
## Create merging function
merging <- function(matrix) {
output <- full.adjacency
for (i in 1:nrow(matrix)){
for (j in 1:ncol(matrix)) {
row <- rownames(matrix)[i]
col <- colnames(matrix)[j]
output[row,col] <- matrix[i,j]
}
}
output[is.na(output)] <- 0
return(output)
}
## Applying function for all individuals :
am.g1.G26xJ203 <- merging(am.g1.G26xJ203)
View(am.g1.G26xJ203)
am.g1.G30xJ210 <- merging(am.g1.G30xJ210)
am.g1.H30xH71 <- merging(am.g1.H30xH71)
am.g1.H45xH65 <- merging(am.g1.H45xH65)
am.g1.H62xJ132 <- merging(am.g1.H62xJ132)
am.g1.J101xJ204 <- merging(am.g1.J101xJ204)
am.g1.J102xJ206 <- merging(am.g1.J102xJ206)
am.g1.J110xH67 <- merging(am.g1.J110xH67)
am.g1.J124xG42 <- merging(am.g1.J124xG42)
am.g1.J144xG39 <- merging(am.g1.J144xG39)
am.g1.J183xH26 <- merging(am.g1.J183xH26)
am.g1.J189xJ112 <- merging(am.g1.J189xJ112)
am.g1.J190xJ42 <- merging(am.g1.J190xJ42)
am.g1.J191xJ68 <- merging(am.g1.J191xJ68)
am.g1.J201xG43 <- merging(am.g1.J201xG43)
# Second group
am.g2.G30xH52 <- merging(am.g2.G30xH52)
am.g2.H30xG38 <- merging(am.g2.H30xG38)
am.g2.H62xG33 <- merging(am.g2.H62xG33)
am.g2.J101xH76 <- merging(am.g2.J101xH76)
am.g2.J102xJ161 <- merging(am.g2.J102xJ161)
am.g2.J110xJ140 <- merging(am.g2.J110xJ140)
am.g2.J124xG32 <- merging(am.g2.J124xG32)
am.g2.J144xG38 <- merging(am.g2.J144xG38)
am.g2.J183xG35 <- merging(am.g2.J183xG35)
am.g2.J190xJ212 <- merging(am.g2.J190xJ212)
View(am.g1.J190xJ42)
i=13
j=2
list1 <- rep(NA,15)
list2 <- rep(NA,15)
list1[z] <- as.numeric(am.group1[[z]][i,j])
list2[z] <- as.numeric(am.group2[[z]][i,j])
list1
list2
View(am.g1.G26xJ203)
View(am.g1.G30xJ210)
View(am.g1.H30xH71)
View(am.g1.H45xH65)
View(ag.group1)
View(am.group1)
am.group1[[4]]
am.group1[[z]][i,j]
list1[z] <- as.numeric(am.group1[[4]][i,j])
am.group1[[4]][i,j]
as.numeric(am.group1[[4]][i,j])
list1 <- rep(NA,15)
list2 <- rep(NA,15)
list1
for (z in 1:15) {
list1[z] <- as.numeric(am.group1[[4]][i,j])
list2[z] <- as.numeric(am.group2[[z]][i,j])
}
list1
for (z in 1:15) {
list1[z] <- as.numeric(am.group1[[4]][i,j])
list2[z] <- as.numeric(am.group2[[z]][i,j])
}
list1
for (z in 1:15) {
list1[z] <- as.numeric(am.group1[[z]][i,j])
list2[z] <- as.numeric(am.group2[[z]][i,j])
}
list1
list2
wilcox.test(list1,list2,paired=T)
k <- 1
for (i in 1:14) {
for (j in 1:14) {
list1 <- rep(NA,15)
list2 <- rep(NA,15)
for (z in 1:15) {
list1[z] <- as.numeric(am.group1[[z]][i,j])
list2[z] <- as.numeric(am.group2[[z]][i,j])
print(list1)
print(list2)
}
pvalue.df[k,1] <- i
pvalue.df[k,2] <- j
k <- k+1
pvalue.df[k-1,3] <- wilcox.test(list1,list2,paired=TRUE)$p.value
}
}
i=14
j=14
for (z in 1:15) {
list1[z] <- as.numeric(am.group1[[z]][i,j])
list2[z] <- as.numeric(am.group2[[z]][i,j])
}
list1
list2
View(am.group1)
am.group1[[15]]
am.group1[[12]]
View(am.group2)
am.group2[[11]]
j=8
for (z in 1:15) {
list1[z] <- as.numeric(am.group1[[z]][i,j])
list2[z] <- as.numeric(am.group2[[z]][i,j])
}
list1
list2
wilcox.test(list1,list2,paired=T)
k <- 1
for (i in 1:14) {
for (j in 1:14) {
list1 <- rep(NA,15)
list2 <- rep(NA,15)
for (z in 1:15) {
list1[z] <- as.numeric(am.group1[[z]][i,j])
list2[z] <- as.numeric(am.group2[[z]][i,j])
}
pvalue.df[k,1] <- i
pvalue.df[k,2] <- j
k <- k+1
pvalue.df[k-1,3] <- wilcox.test(list1,list2,paired=TRUE)$p.value
print(list1)
print("\n")
print(list2)
}
}
for (i in 1:14) {
for (j in 1:14) {
list1 <- rep(NA,15)
list2 <- rep(NA,15)
for (z in 1:15) {
list1[z] <- as.numeric(am.group1[[z]][i,j])
list2[z] <- as.numeric(am.group2[[z]][i,j])
}
pvalue.df[k,1] <- i
pvalue.df[k,2] <- j
k <- k+1
pvalue.df[k-1,3] <- wilcox.test(list1,list2,paired=TRUE)$p.value
print(list1)
print("\n")
print(list2)
print("\n")
}
}
view(pvalue.df)
wilcox.test(LS.M$time.prop1,LS.M$time.prop2,paired=TRUE)
options(scipen = 999)
sort(mean.time.group1$sum)
View(mean.time.group1)
