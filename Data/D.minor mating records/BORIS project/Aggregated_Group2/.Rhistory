scale_fill_manual(values=c("darkolivegreen1","#FFBBFF")) +
xlab("Female mating state") +
scale_x_discrete(labels = c("Virgin","Mated")) +
ylab("Number of courtship segments") +
ggtitle("Number of courtship attempts depending on female mating state") +
theme_minimal() +
theme(legend.position="none")
knitr::opts_chunk$set(echo = TRUE)
# Packages:
library(tidyverse)
library(Hmisc)
library(car)
library(lme4)
library(performance)
library(AICcmodavg)
# Datasets:
subset1 <- read.table("subset1_Bastien_original_weight.csv",sep=",",header=T)
subset2 <- read.table("subset2_Bastien_original_weight.csv",sep=",",header=T)
data <- rbind(subset1,subset2)
cor(data[,"number.of.attacks","number.of.flees","pre.copulatory.kill","post.copulatory.kill","latency.to.attack"],method = "spearman")
data[,"number.of.attacks","number.of.flees","pre.copulatory.kill","post.copulatory.kill","latency.to.attack"]
data[,"number.of.attacks"]
cor(data[,"number.of.attacks","number.of.flees","pre.copulatory.kill","post.copulatory.kill"],method = "spearman")
cor(data[,"number.of.attacks","number.of.flees","pre.copulatory.kill","latency.to.attack"],method = "spearman")
cor(data[,"number.of.attacks","number.of.flees","post.copulatory.kill","latency.to.attack"],method = "spearman")
cor(data[,"number.of.attacks","pre.copulatory.kill","post.copulatory.kill","latency.to.attack"],method = "spearman")
cor(data[,c("number.of.attacks","number.of.flees","pre.copulatory.kill","post.copulatory.kill","latency.to.attack")],method = "spearman")
cor(data[,c("number.of.attacks","number.of.flees","pre.copulatory.kill","post.copulatory.kill","latency.to.attack")],method = "spearman", use = "complete.obs")
cor(data[,c("number.of.attacks","number.of.flees","pre.copulatory.kill","post.copulatory.kill","latency.to.attack")],method = "spearman")
cor(data[,c("number.of.attacks","number.of.flees","pre.copulatory.kill","post.copulatory.kill","latency.to.attack")],method = "spearman", use = "complete.obs")
cor(data[,c("number.of.attacks","number.of.flees","pre.copulatory.kill","post.copulatory.kill","latency.to.attack")],method = "spearman", use = "complete.obs")
data$Male.killed <- data$pre.copulatory.kill | data$post.copulatory.kill
cor(data[,c("number.of.attacks","number.of.flees","pre.copulatory.kill","post.copulatory.kill","latency.to.attack")],method = "spearman", use = "complete.obs")
cor(data[,c("number.of.attacks","number.of.flees","Male.killed","latency.to.attack")],method = "spearman", use = "complete.obs")
cor.test(data[,c("number.of.attacks","number.of.flees","Male.killed","latency.to.attack")],method = "spearman", use = "complete.obs")
cor(data[,c("number.of.attacks","number.of.flees","Male.killed","latency.to.attack")],method = "spearman", use = "complete.obs")
cor.test(data$latency.to.attack,data$number.of.attacks)
cor.test(data$latency.to.attack,data$number.of.attacks,method = "spearman")
# Creation of contingency table:
Male.killed <- table(subset1$pre.copulatory.kill|subset1$post.copulatory.kill,subset2$pre.copulatory.kill|subset2$post.copulatory.kill,dnn=list("virgin","mated"))
Male.killed
# McNemar's chi square test:
mcnemar.test(Male.killed)
# Creation of model:
mod.court <- glmer(number.of.courtships ~ number.of.attacks : femalematedbefore + (1|Female), family = poisson, data = data)
mod.court
Anova(mod.court,type='II')
# Standardise data:
data$std.number.of.attacks <- scale(data$number.of.attacks,center=TRUE,scale=TRUE)
# Standardise data:
data$std.number.of.coutships <- scale(data$number.of.courtships,center=TRUE,scale=TRUE)
# Standardise data:
data$std.number.of.coutships <- scale(data$number.of.courtships,center=TRUE,scale=TRUE)
number.of.courtships
data$number.of.courtships
# Standardise data:
data$std.number.of.courtships <- scale(data$number.of.courtships,center=TRUE,scale=TRUE)
data$std.total.courtship.duration <- scale(data$total.courtship.duration,center=TRUE,scale=TRUE)
data$total.courtship.duration
data$std.total.courtship.duration
data$std.total.courtship.duration <- scale(data$total.courtship.duration)
data$std.total.courtship.duration
# Standardise data:
data$std.number.of.courtships <- scale(data$number.of.courtships,center=TRUE,scale=TRUE)
data$std.total.courtship.duration <- scale(data$total.courtship.duration,center=TRUE,scale=TRUE)
data$std.mean.courtship.length <- scale(data$mean.courtship.length,center=TRUE,scale=TRUE)
# Creation of model:
mod.attk <- glmer(number.of.attacks ~ femalematedbefore:std.number.of.courtships + femalematedbefore:std.total.courtship.duration + femalematedbefore:std.mean.courtship.length + (1|Female),family = poisson,data=data)
mod.attk
# Creation of model:
mod.attk <- glmer(number.of.attacks ~ femalematedbefore:std.number.of.courtships + femalematedbefore:std.total.courtship.duration + femalematedbefore:std.mean.courtship.length + (1|Female),family = poisson,data=data)
summary(mod.attk)
# Creation of model:
mod.attk <- mixed.lmer(number.of.attacks ~ femalematedbefore:std.number.of.courtships + femalematedbefore:std.total.courtship.duration + femalematedbefore:std.mean.courtship.length + (1|Female),family = poisson,data=data)
# Creation of model:
mod.attk <- lmer(number.of.attacks ~ femalematedbefore:std.number.of.courtships + femalematedbefore:std.total.courtship.duration + femalematedbefore:std.mean.courtship.length + (1|Female),family = poisson,data=data)
# Creation of model:
mod.attk <- lmer(number.of.attacks ~ femalematedbefore:std.number.of.courtships + femalematedbefore:std.total.courtship.duration + femalematedbefore:std.mean.courtship.length + (1|Female),family = poisson,data=data)
# Creation of model:
mod.attk <- lmer(number.of.attacks ~ femalematedbefore:std.number.of.courtships + femalematedbefore:std.total.courtship.duration + femalematedbefore:std.mean.courtship.length + (1|Female),data=data)
summary(mod.attk)
# Creation of model:
mod.attk <- glmer(number.of.attacks ~ femalematedbefore:std.number.of.courtships + femalematedbefore:std.total.courtship.duration + femalematedbefore:std.mean.courtship.length + (1|Female),family = poisson,data=data)
summary(mod.attk)
# Obtain VIF:
vif(mod.attk)
# Obtain VIF:
vif(mod.attk)
# Find best model based on AIC:
AIC(glmer(number.of.attacks ~ femalematedbefore:std.number.of.courtships + femalematedbefore:std.total.courtship.duration + femalematedbefore:std.mean.courtship.length + (1|Female),family = poisson,data=data))
AIC(glmer(number.of.attacks ~ femalematedbefore:std.total.courtship.duration + femalematedbefore:std.mean.courtship.length + (1|Female),family = poisson,data=data))
AIC(glmer(number.of.attacks ~ femalematedbefore:std.number.of.courtships + femalematedbefore:std.mean.courtship.length + (1|Female),family = poisson,data=data))
AIC(glmer(number.of.attacks ~ femalematedbefore:std.number.of.courtships + femalematedbefore:std.total.courtship.duration + (1|Female),family = poisson,data=data))
AIC(glmer(number.of.attacks ~ femalematedbefore:std.mean.courtship.length + (1|Female),family = poisson,data=data))
AIC(glmer(number.of.attacks ~ femalematedbefore:std.number.of.courtships + (1|Female),family = poisson,data=data))
AIC(glmer(number.of.attacks ~ femalematedbefore:std.total.courtship.duration + (1|Female),family = poisson,data=data))
AIC(glmer(number.of.attacks ~ 1 + (1|Female),family = poisson,data=data))
# Find best model based on AIC:
AIC(glmer(number.of.attacks ~ femalematedbefore:std.number.of.courtships + femalematedbefore:std.total.courtship.duration + femalematedbefore:std.mean.courtship.length + (1|Female),family = poisson,data=data))
AIC(glmer(number.of.attacks ~ femalematedbefore:std.total.courtship.duration + femalematedbefore:std.mean.courtship.length + (1|Female),family = poisson,data=data))
AIC(glmer(number.of.attacks ~ femalematedbefore:std.number.of.courtships + femalematedbefore:std.mean.courtship.length + (1|Female),family = poisson,data=data))
AIC(glmer(number.of.attacks ~ femalematedbefore:std.number.of.courtships + femalematedbefore:std.total.courtship.duration + (1|Female),family = poisson,data=data))
AIC(glmer(number.of.attacks ~ femalematedbefore:std.mean.courtship.length + (1|Female),family = poisson,data=data))
AIC(glmer(number.of.attacks ~ femalematedbefore:std.number.of.courtships + (1|Female),family = poisson,data=data))
AIC(glmer(number.of.attacks ~ femalematedbefore:std.total.courtship.duration + (1|Female),family = poisson,data=data))
AIC(glmer(number.of.attacks ~ 1 + (1|Female),family = poisson,data=data))
AIC(glmer(number.of.attacks ~ (1|Female),family = poisson,data=data))
# Find best model based on AIC:
AIC(glmer(number.of.attacks ~ femalematedbefore:std.number.of.courtships + femalematedbefore:std.total.courtship.duration + femalematedbefore:std.mean.courtship.length + (1|Female),family = poisson,data=data))
AIC(glmer(number.of.attacks ~ femalematedbefore:std.total.courtship.duration + femalematedbefore:std.mean.courtship.length + (1|Female),family = poisson,data=data))
AIC(glmer(number.of.attacks ~ femalematedbefore:std.number.of.courtships + femalematedbefore:std.mean.courtship.length + (1|Female),family = poisson,data=data))
AIC(glmer(number.of.attacks ~ femalematedbefore:std.number.of.courtships + femalematedbefore:std.total.courtship.duration + (1|Female),family = poisson,data=data))
AIC(glmer(number.of.attacks ~ femalematedbefore:std.mean.courtship.length + (1|Female),family = poisson,data=data))
AIC(glmer(number.of.attacks ~ femalematedbefore:std.number.of.courtships + (1|Female),family = poisson,data=data))
AIC(glmer(number.of.attacks ~ femalematedbefore:std.total.courtship.duration + (1|Female),family = poisson,data=data))
AIC(glmer(number.of.attacks ~ 1 + (1|Female),family = poisson,data=data))
AIC(glmer(number.of.attacks ~ 1 ,family = poisson,data=data))
# Find best model based on AIC:
AIC(glmer(number.of.attacks ~ femalematedbefore:std.number.of.courtships + femalematedbefore:std.total.courtship.duration + femalematedbefore:std.mean.courtship.length + (1|Female),family = poisson,data=data))
AIC(glmer(number.of.attacks ~ femalematedbefore:std.total.courtship.duration + femalematedbefore:std.mean.courtship.length + (1|Female),family = poisson,data=data))
AIC(glmer(number.of.attacks ~ femalematedbefore:std.number.of.courtships + femalematedbefore:std.mean.courtship.length + (1|Female),family = poisson,data=data))
AIC(glmer(number.of.attacks ~ femalematedbefore:std.number.of.courtships + femalematedbefore:std.total.courtship.duration + (1|Female),family = poisson,data=data))
AIC(glmer(number.of.attacks ~ femalematedbefore:std.mean.courtship.length + (1|Female),family = poisson,data=data))
AIC(glmer(number.of.attacks ~ femalematedbefore:std.number.of.courtships + (1|Female),family = poisson,data=data))
AIC(glmer(number.of.attacks ~ femalematedbefore:std.total.courtship.duration + (1|Female),family = poisson,data=data))
AIC(glmer(number.of.attacks ~ 1 + (1|Female),family = poisson,data=data))
mod.attk2 <- glmer(number.of.attacks ~ femalematedbefore:std.number.of.courtships + (1|Female),family = poisson,data=data)
mod.attk2 <- glmer(number.of.attacks ~ femalematedbefore:std.number.of.courtships + (1|Female),family = poisson,data=data)
summary(mod.attk2)
cor.test(data$number.of.attacks,data$number.of.courtships)
# Creation of model:
mod.lat.attk <- glmer(latency.to.attack ~ femalematedbefore:std.number.of.courtships + femalematedbefore:std.total.courtship.duration + femalematedbefore:std.mean.courtship.length + (1|Female),family = gaussian,data=data)
summary(mod.lat.attk)
# Obtain VIF:
vif(mod.lat.attk)
# Remove femalematedbefore:std.total.courtship.duration:
mod.lat.attk2 <- glmer(latency.to.attack ~ femalematedbefore:std.number.of.courtships + femalematedbefore:std.mean.courtship.length + (1|Female),family = gaussian,data=data)
summary(mod.lat.attk2)
# Remove femalematedbefore:std.total.courtship.duration:
mod.lat.attk2 <- lmer(latency.to.attack ~ femalematedbefore:std.number.of.courtships + femalematedbefore:std.mean.courtship.length + (1|Female),data=data)
summary(mod.lat.attk2)
# Remove femalematedbefore:std.total.courtship.duration:
mod.lat.attk2 <- lmer(latency.to.attack ~ femalematedbefore:std.number.of.courtships + femalematedbefore:std.mean.courtship.length + (1|Female),data=data)
summary(mod.lat.attk2)
# Obtain VIF:
vif(mod.lat.attk2)
# Find the best model based on AIC:
AIC(lmer(latency.to.attack ~ femalematedbefore:std.number.of.courtships + femalematedbefore:std.mean.courtship.length + (1|Female),data=data))
AIC(lmer(latency.to.attack ~ femalematedbefore:std.mean.courtship.length + (1|Female),data=data))
AIC(lmer(latency.to.attack ~ femalematedbefore:std.number.of.courtships + (1|Female),data=data))
AIC(lmer(latency.to.attack ~ (1|Female),data=data))
# Find the best model based on AIC:
AIC(lmer(latency.to.attack ~ femalematedbefore:std.number.of.courtships + femalematedbefore:std.mean.courtship.length + (1|Female),data=data))
AIC(lmer(latency.to.attack ~ femalematedbefore:std.mean.courtship.length + (1|Female),data=data))
AIC(lmer(latency.to.attack ~ femalematedbefore:std.number.of.courtships + (1|Female),data=data))
AIC(lmer(latency.to.attack ~ (1|Female),data=data))
# Remove femalematedbefore:std.total.courtship.duration:
mod.lat.attk2 <- lmer(latency.to.attack ~ femalematedbefore:std.number.of.courtships + femalematedbefore:std.mean.courtship.length + (1|Female),data=data)
summary(mod.lat.attk2)
# Creation of model:
mod.mount <- glmer(mean.mount.length ~ femalematedbefore:std.number.of.courtships + femalematedbefore:std.total.courtship.duration + femalematedbefore:std.mean.courtship.length + (1|Female),family = gaussian,data=data)
summary(mod.mount)
# Creation of model:
mod.mount <- lmer(mean.mount.length ~ femalematedbefore:std.number.of.courtships + femalematedbefore:std.total.courtship.duration + femalematedbefore:std.mean.courtship.length + (1|Female),data=data)
summary(mod.mount)
# Obtain VIF:
vif(mod.mount)
# Find the best model based on AIC:
AIC(lmer(mean.mount.length ~ femalematedbefore:std.number.of.courtships + femalematedbefore:std.total.courtship.duration + femalematedbefore:std.mean.courtship.length + (1|Female),data=data))
AIC(lmer(mean.mount.length ~ femalematedbefore:std.total.courtship.duration + femalematedbefore:std.mean.courtship.length + (1|Female),data=data))
AIC(lmer(mean.mount.length ~ femalematedbefore:std.number.of.courtships + femalematedbefore:std.mean.courtship.length + (1|Female),data=data))
AIC(lmer(mean.mount.length ~ femalematedbefore:std.number.of.courtships + femalematedbefore:std.total.courtship.duration + (1|Female),data=data))
AIC(lmer(mean.mount.length ~ femalematedbefore:std.mean.courtship.length + (1|Female),data=data))
AIC(lmer(mean.mount.length ~ femalematedbefore:std.number.of.courtships + (1|Female),data=data))
AIC(lmer(mean.mount.length ~ femalematedbefore:std.total.courtship.duration + (1|Female),data=data))
AIC(lmer(mean.mount.length ~ (1|Female),data=data))
summary(mod.mount)
# Creation of model:
mod.attk <- glmer(number.of.flees ~ femalematedbefore:std.number.of.courtships + femalematedbefore:std.total.courtship.duration + femalematedbefore:std.mean.courtship.length + (1|Female),family = poisson,data=data)
summary(mod.attk)
# Creation of model:
mod.flees <- glmer(number.of.flees ~ femalematedbefore:std.number.of.courtships + femalematedbefore:std.total.courtship.duration + femalematedbefore:std.mean.courtship.length + (1|Female),family = poisson,data=data)
summary(mod.flees)
# Obtain VIF:
vif(mod.flees)
# Find best model based on AIC:
AIC(glmer(number.of.flees ~ femalematedbefore:std.number.of.courtships + femalematedbefore:std.total.courtship.duration + femalematedbefore:std.mean.courtship.length + (1|Female),family = poisson,data=data))
AIC(glmer(number.of.flees ~ femalematedbefore:std.total.courtship.duration + femalematedbefore:std.mean.courtship.length + (1|Female),family = poisson,data=data))
AIC(glmer(number.of.flees ~ femalematedbefore:std.number.of.courtships + femalematedbefore:std.mean.courtship.length + (1|Female),family = poisson,data=data))
AIC(glmer(number.of.flees ~ femalematedbefore:std.number.of.courtships + femalematedbefore:std.total.courtship.duration + (1|Female),family = poisson,data=data))
AIC(glmer(number.of.flees ~ femalematedbefore:std.mean.courtship.length + (1|Female),family = poisson,data=data))
AIC(glmer(number.of.flees ~ femalematedbefore:std.number.of.courtships + (1|Female),family = poisson,data=data))
AIC(glmer(number.of.flees ~ femalematedbefore:std.total.courtship.duration + (1|Female),family = poisson,data=data))
AIC(glmer(number.of.flees ~ 1 + (1|Female),family = poisson,data=data))
mod.flees2 <- glmer(number.of.flees ~ femalematedbefore:std.number.of.courtships + (1|Female),family = poisson,data=data)
summary(mod.flees2)
cor(data[,c("number.of.courtships,"number.of.attacks","number.of.flees"")])
cor(data[,c("number.of.courtships","number.of.attacks","number.of.flees")])
# Packages:
library(tidyverse)
library(Hmisc)
library(car)
library(lme4)
library(performance)
library(AICcmodavg)
library(gridExtra)
library(plotrix)
# Dataset
subset1 <- read.table("subset1_Bastien_original_weight.csv",sep=",",header=T)
# Graphical representation
ggplot(data, aes(x=femalematedbefore, y=total.courtship.duration, fill=femalematedbefore)) +
geom_violin() +
geom_boxplot(width = 0.1) +
scale_fill_manual(values=c("#F2F2F2","gray75")) +
xlab("") +
scale_x_discrete(labels = c("Unmated","Mated")) +
ylab("Total courtship duration (s)") +
theme_light(base_size = 16) +
theme(legend.position="none")
View(data)
# Graphical representation
ggplot(data, aes(x=femalematedbefore, y=latency.to.mount, fill=femalematedbefore)) +
geom_violin() +
geom_boxplot(width = 0.1) +
scale_fill_manual(values=c("#F2F2F2","gray75")) +
xlab("") +
scale_x_discrete(labels = c("Unmated","Mated")) +
ylab("Latency to mount (s)") +
theme_light(base_size = 16) +
theme(legend.position="none")
plot2 <- ggplot(data, aes(x=femalematedbefore, y=number.of.courtships, fill=femalematedbefore)) +
geom_violin() +
geom_boxplot(width = 0.1) +
scale_fill_manual(values=c("#F2F2F2","gray75")) +
xlab("Statut de la femelle") +
scale_x_discrete(labels = c("Vierge","Fécondée")) +
ylab("Nombre de tentatives du mâle") +
theme_light(base_size = 20) +
theme(legend.position="none") +
scale_y_continuous(limits = c(0,12),breaks = c(0,3,6,9,12)scale_y_continuous(limits = c(0,12),breaks = c(0,3,6,9,12)))
#### Packages used ####
library(data.table)
library(Hmisc)
library(tidyverse)
library(igraph)
library(rqdatatable)
library(writexl)
#### Import data ####
# It should be a binary table generated by BORIS as a .tsv
# Group1:
setwd("C:\\Users\\bclem\\OneDrive\\Documents\\Formation\\Stage\\WAIKATO\\Data\\D.minor mating records\\BORIS project\\Heavy_Binary_Group1")
g1.G26xJ203 <- as.data.frame(fread("G26 x J203_No focal subject.tsv"))
g1.G30xJ210 <- as.data.frame(fread("G30 x J210_No focal subject.tsv"))
g1.H30xH71 <- as.data.frame(fread("H30 x H71_No focal subject.tsv"))
g1.H45xH65 <- as.data.frame(fread("H45 x H65_No focal subject.tsv"))
g1.H62xJ132 <- as.data.frame(fread("H62 x J132_No focal subject.tsv"))
g1.J101xJ204 <- as.data.frame(fread("J101 x J204_No focal subject.tsv"))
g1.J102xJ206 <- as.data.frame(fread("J102 x J206_No focal subject.tsv"))
g1.J110xH67 <- as.data.frame(fread("J110 x H67_No focal subject.tsv"))
g1.J124xG42 <- as.data.frame(fread("J124 x G42_No focal subject.tsv"))
g1.J144xG39 <- as.data.frame(fread("J144 x G39_No focal subject.tsv"))
g1.J183xH26 <- as.data.frame(fread("J183 x H26_No focal subject.tsv"))
g1.J189xJ112 <- as.data.frame(fread("J189 x J112_No focal subject.tsv"))
g1.J190xJ42 <- as.data.frame(fread("J190 x J42_No focal subject.tsv"))
g1.J191xJ68 <- as.data.frame(fread("J191 x J68_No focal subject.tsv"))
g1.J201xG43 <- as.data.frame(fread("J201 x G43_No focal subject.tsv"))
# Group2:
setwd("C:\\Users\\bclem\\OneDrive\\Documents\\Formation\\Stage\\WAIKATO\\Data\\D.minor mating records\\BORIS project\\Heavy_Binary_Group2")
g2.G30xH52 <- as.data.frame(fread("G30 x H52_No focal subject.tsv"))
g2.H30xG38 <- as.data.frame(fread("H30 x G38_No focal subject.tsv"))
g2.H62xG33 <- as.data.frame(fread("H62 x G33_No focal subject.tsv"))
g2.J101xH76 <- as.data.frame(fread("J101 x H76_No focal subject.tsv"))
g2.J102xJ161 <- as.data.frame(fread("J102 x J161_No focal subject.tsv"))
g2.J110xJ140 <- as.data.frame(fread("J110 x J140_No focal subject.tsv"))
g2.J124xG32 <- as.data.frame(fread("J124 x G32_No focal subject.tsv"))
g2.J144xG38 <- as.data.frame(fread("J144 x G38_No focal subject.tsv"))
g2.J183xG35 <- as.data.frame(fread("J183 x G35_No focal subject.tsv"))
g2.J190xJ212 <- as.data.frame(fread("J190 x J212_No focal subject.tsv"))
### Function for removing behaviors that are no longer used ###
cleaning.behaviours <- function(data) {
# Remove orientation
if ("Orientation" %in% colnames(data)) {
data <- data[,-which(colnames(data)=="Orientation")]
}
# Remove Random locomotion
if ("Random Locomotion" %in% colnames(data)) {
data <- data[,-which(colnames(data)=="Random Locomotion")]
}
# Remove Vibration interaction
if ("Vibration interaction" %in% colnames(data)) {
data <- data[,-which(colnames(data)=="Vibration interaction")]
}
# Remove Approach (Should be removed later)
if ("Approach" %in% colnames(data)) {
data <- data[,-which(colnames(data)=="Approach")]
}
# Add "Courtship start" behavior
data$Courtship.Start <- c(1,rep(0,nrow(data)-1))
# Add "Mounting start" behavior
i <- which(data$Mounted != dplyr::lag((data$Mounted)))
data$Mounting.Start <- c(rep(0,i[1]-1),1,rep(0,nrow(data)-i[1]))
return(data)
}
### Function for exclusive behaviors, treated as a string of "A + B +..." ###
### Will be used in the latter function ###
exclusive.behaviours <- function(text) {
if (grepl("Abdomen Tapping",text,fixed=TRUE)) {
text <- "Abdomen Tapping"
}
if (grepl("Mounting.Start",text,fixed=TRUE)) {
text <- "Mounting.Start"
}
if (grepl("Courtship.Start",text,fixed=TRUE)) {
text <- "Courtship.Start"
}
if (grepl("Freezing",text,fixed=TRUE)) {
if (grepl("Mounted",text,fixed=TRUE)) {
text <- "Mounted + Freezing"
} else { text <- "Freezing" }
}
if (grepl("Retreat",text,fixed=TRUE)) {
text <- "Retreat"
}
if (grepl("Female Kill",text,fixed=TRUE)) {
text <- "Female Kill"
}
if (grepl("Pedipalp Insertion",text,fixed=TRUE)) {
text <- "Pedipalp Insertion"
}
if (text == "Mounted") {
text <- "Mounted + Freezing"
}
text
}
### Function to aggregate behaviors ###
behavioural.aggregation <- function(data) {
# Creating an empty data frame for the final output
output <- data.frame(matrix(nrow = 0, ncol = 3))
colnames(output) <- c("Behaviour", "START", "STOP")
# Loop for the first row (A)
i <- 1
while (i < nrow(data)) {
# Convert binary data to text for row A
textA <- ""
while (textA == "") {
vec <- c()
for (z in 2:ncol(data)) {
if (data[i, z] == 1) {
vec <- append(vec,colnames(data)[z])
}
}
textA <- paste(vec, collapse = " + ")
textA <- exclusive.behaviours(textA)
if (textA == "") {
i <- i+1
}
}
# Retain beginning time of the behavior
startA <- data[i,1]
# Loop for the second row (B)
j <- i + 1
# Convert binary data to text for row B
vec <- c()
for (z in 2:ncol(data)) {
if (data[j, z] == 1) {
vec <- append(vec,colnames(data)[z])
}
}
textB <- paste(vec, collapse = " + ")
textB <- exclusive.behaviours(textB)
# Loop to see if behavior has changed
while ((textA == textB | textB=="") & j < nrow(data)) {
j <- j + 1
# Update textB
vec <- c()
for (z in 2:ncol(data)) {
if (data[j, z] == 1) {
vec <- append(vec,colnames(data)[z])
}
}
textB <- paste(vec, collapse = " + ")
textB <- exclusive.behaviours(textB)
}
# Retain the timecode of the changing behavior
stopA <- data[j,1]
# Add the row to the output dataframe
output[nrow(output)+1,] <- c(textA,startA,stopA)
i <- j
}
# Changing strings to numeric for the time codes
output$START <- as.numeric(output$START)
output$STOP <- as.numeric(output$STOP)
# Creating rows for the duration of each behavior and the ID
output$Duration <- output$STOP - output$START
output$ID <- rep(deparse(substitute(data)),nrow(output))
# Final result
output
}
### Function to format behaviors for transition analysis ###
format.behaviours <- function(data) {
# Creating and empty data frame
output <- as.data.frame(matrix(nrow=nrow(data)-1 ,ncol = 3))
colnames(output) <- c("Behavior 0","Behavior 1","Mating ID")
# Adding the behaviours :
output[,1] <- data[-nrow(data),1]
output[,2] <- data[-1,1]
output[,3] <- data[-1,5]
# Final output
output
}
### Function to remove micro-behaviors ###
remove.microbehaviours <- function(data,s) {
list <- c()
exempted <- c("Courtship.Start","Mounting.Start","Abdomen Tapping")
for (i in 1:nrow(data)) {
if (data[i,4] <= 1 & !(data[i,1] %in% exempted)) {
list <- c(list,i)
}
}
data <- data[-list,]
return(data)
}
### Merge consecutive behaviours ###
merge.behaviours <- function(data) {
i <- 1
while (i <= (nrow(data)-1)) {
if (data[i,1] == data[(i+1),1]) {
data[i,3] <- data[i+1,3]
data[i,4] <- data[i,4]+data[i+1,4]
data <- data[-(i+1),]
i <- i-1
}
i <- i+1
}
return(data)
}
## Remove useless behaviors
# First group
g1.G26xJ203 <- cleaning.behaviours(g1.G26xJ203)
g1.G30xJ210 <- cleaning.behaviours(g1.G30xJ210)
g1.H30xH71 <- cleaning.behaviours(g1.H30xH71) ##
g1.H45xH65 <- cleaning.behaviours(g1.H45xH65)
g1.H62xJ132 <- cleaning.behaviours(g1.H62xJ132)
g1.J101xJ204 <- cleaning.behaviours(g1.J101xJ204)
g1.J102xJ206 <- cleaning.behaviours(g1.J102xJ206)
g1.J110xH67 <- cleaning.behaviours(g1.J110xH67)
g1.J124xG42 <- cleaning.behaviours(g1.J124xG42)
g1.J144xG39 <- cleaning.behaviours(g1.J144xG39)
g1.J183xH26 <- cleaning.behaviours(g1.J183xH26)
g1.J189xJ112 <- cleaning.behaviours(g1.J189xJ112)
g1.J190xJ42 <- cleaning.behaviours(g1.J190xJ42)
g1.J191xJ68 <- cleaning.behaviours(g1.J191xJ68)
g1.J201xG43 <- cleaning.behaviours(g1.J201xG43)
# Second group
g2.G30xH52 <- cleaning.behaviours(g2.G30xH52)
g2.H30xG38 <- cleaning.behaviours(g2.H30xG38) ##
g2.H62xG33 <- cleaning.behaviours(g2.H62xG33)
g2.J101xH76 <- cleaning.behaviours(g2.J101xH76)
g2.J102xJ161 <- cleaning.behaviours(g2.J102xJ161)
g2.J110xJ140 <- cleaning.behaviours(g2.J110xJ140)
g2.J124xG32 <- cleaning.behaviours(g2.J124xG32)
g2.J144xG38 <- cleaning.behaviours(g2.J144xG38)
g2.J183xG35 <- cleaning.behaviours(g2.J183xG35)
g2.J190xJ212 <- cleaning.behaviours(g2.J190xJ212)
## Aggregation
# First group
ag.g1.G26xJ203 <- behavioural.aggregation(g1.G26xJ203)
ag.g1.G30xJ210 <- behavioural.aggregation(g1.G30xJ210)
ag.g1.H30xH71 <- behavioural.aggregation(g1.H30xH71) ##
#### Packages ####
## Packages
library(tidyverse)
## Data, import aggregated behaviours (see script for data formatting)
ag.g1.G26xJ203 <-   read.csv("Aggregated_G26xJ203.csv")
setwd("C:/Users/bclem/OneDrive/Documents/Formation/Stage/WAIKATO/Data/D.minor mating records/BORIS project/Aggregated_Group1")
## Data, import aggregated behaviours (see script for data formatting)
ag.g1.G26xJ203 <-   read.csv("Aggregated_G26xJ203.csv")
View(ag.g1.G26xJ203)
ag.g1.G30xJ210 <-   read.csv("Aggregated_G30xJ210.csv")
ag.g1.H30xH71 <-    read.csv("Aggregated_H30xH71.csv")
ag.g1.H45xH65 <-    read.csv("Aggregated_H45xH65.csv")
ag.g1.H62xJ132 <-   read.csv("Aggregated_H62xJ132.csv")
ag.g1.J101xJ204 <-  read.csv("Aggregated_J101xJ204.csv")
ag.g1.J102xJ206 <-  read.csv("Aggregated_J102xJ206.csv")
ag.g1.J110xH67 <-   read.csv("Aggregated_J110xH67.csv")
ag.g1.J124xG42 <-   read.csv("Aggregated_J124xG42.csv")
ag.g1.J144xG39 <-   read.csv("Aggregated_J144xG39.csv")
ag.g1.J183xH26 <-   read.csv("Aggregated_J183xH26.csv")
ag.g1.J189xJ11 <-   read.csv("Aggregated_J189xJ112.csv")
ag.g1.J190xJ42 <-   read.csv("Aggregated_J190xJ42.csv")
ag.g1.J191xJ68 <-   read.csv("Aggregated_J191xJ68.csv")
ag.g1.J201xG43 <-   read.csv("Aggregated_J201xG43.csv")
ag.g2.G30xH52 <-    read.csv("Aggregated_G30xH52.csv")
setwd("C:/Users/bclem/OneDrive/Documents/Formation/Stage/WAIKATO/Data/D.minor mating records/BORIS project/Aggregated_Group2")
ag.g2.G30xH52 <-    read.csv("Aggregated_G30xH52.csv")
ag.g2.H30xG38 <-    read.csv("Aggregated_H30xG38.csv")
ag.g2.H62xG33 <-    read.csv("Aggregated_H62xG33.csv")
ag.g2.J101xH76 <-   read.csv("Aggregated_J101xH76.csv")
ag.g2.J102xJ161 <-  read.csv("Aggregated_J102xJ161.csv")
ag.g2.J110xJ140 <-  read.csv("Aggregated_J110xJ140.csv")
ag.g2.J124xG32 <-   read.csv("Aggregated_J124xG32.csv")
ag.g2.J144xG38 <-   read.csv("Aggregated_J144xG38.csv")
ag.g2.J183xG35 <-   read.csv("Aggregated_J183xG35.csv")
ag.g2.J190xJ212 <-  read.csv("Aggregated_J190xJ212.csv")
#### Comparison of behaviour frequencies ####
## Obtain total time for each behaviour of each trial
time.prop.g1.G26xJ203 <- ag.g1.G26xJ203 %>% group_by(Behaviour) %>% summarise(time.prop = sum(Duration),ID = unique(ID))
View(time.prop.g1.G26xJ203)
## Obtain time frequency of each behaviour by dividing by the sum
time.prop.g1.G26xJ203$time.prop <- time.prop.g1.G26xJ203$time.prop / sum(time.prop.g1.G26xJ203$time.prop)
View(time.prop.g1.G26xJ203)
sum(time.prop.g1.G26xJ203$time.prop)
